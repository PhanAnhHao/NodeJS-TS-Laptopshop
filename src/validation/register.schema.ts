import { isEmailExist } from "services/client/auth.service";
import { z } from "zod";

const passwordSchema = z
    .string()
    .min(3, { message: "Password t·ªëi thi·ªÉu 3 k√Ω t·ª±" })
    .max(20, { message: "Password t·ªëi ƒëa 20 k√Ω t·ª±" })
// .refine((password) => /[A-Z]/.test(password), {
//     message: "Password bao g·ªìm √≠t nh·∫•t 1 k√Ω t·ª± vi·∫øt hoa",
// })
// .refine((password) => /[a-z]/.test(password), {
//     message: "Password bao g·ªìm √≠t nh·∫•t 1 k√Ω t·ª± vi·∫øt th∆∞·ªùng",
// })
// .refine((password) => /[0-9]/.test(password), {
//     message: "Password bao g·ªìm √≠t nh·∫•t 1 ch·ªØ s·ªë"
// })
// .refine((password) => /[!@#$%^&*]/.test(password), {
//     message: "Password bao g·ªìm √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát",
// });

const emailSchema =
    z.string().email("Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng")
        .refine(async (email) => {
            const existingUser = await isEmailExist(email);
            return !existingUser;
        }, {
            message: "Email already exists",
            path: ["email"],
        });

// const emailSchema = z.string()
//     .trim()
//     .refine((val) => val.length > 0, {
//         message: "T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
//     })
//     .refine((val) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(val), {
//         message: "Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng",
//     })
//     .refine(async (email) => {
//         const existingUser = await isEmailExist(email);
//         return !existingUser;
//     }, {
//         message: "Email already exists",
//         path: ["email"],
//     });

// d√πng .superRefine() ƒë·ªÉ ki·ªÉm so√°t lu·ªìng ki·ªÉm tra theo th·ª© t·ª±
// const emailSchema = z.string().trim().superRefine(async (val, ctx) => {
//     // ctx = context
//     // V√¨ sao ctx quan tr·ªçng ?
//     // N·∫øu d√πng.refine() ‚Üí ch·ªâ c√≥ th·ªÉ tr·∫£ v·ªÅ true / false
//     // Nh∆∞ng.superRefine() v·ªõi ctx.addIssue() ‚Üí  c√≥ th·ªÉ b√°o nhi·ªÅu l·ªói kh√°c nhau, d·ª´ng logic, vi·∫øt ƒëi·ªÅu ki·ªán ph·ª©c t·∫°p

//     // 1. Ki·ªÉm tra r·ªóng
//     if (val === '') {
//         // ctx c√≥ ph∆∞∆°ng th·ª©c .addIssue() gi√∫p b√°o l·ªói th·ªß c√¥ng khi ki·ªÉm tra d·ªØ li·ªáu.
//         ctx.addIssue({
//             code: z.ZodIssueCode.custom,
//             /**D√≤ng code: z.ZodIssueCode.custom c√≥ nghƒ©a l√†:
//             üîß Zod s·∫Ω hi·ªÉu l·ªói n√†y l√† l·ªói do b·∫°n t·ª± ƒë·ªãnh nghƒ©a,
//             kh√¥ng ph·∫£i l·ªói c√≥ s·∫µn nh∆∞ too_short, invalid_type, hay invalid_email. */
//             message: "T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
//         });
//         return; // ‚ùå d·ª´ng l·∫°i kh√¥ng ki·ªÉm tra ti·∫øp
//     }

//     // 2. Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
//     const isValidEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(val);
//     if (!isValidEmail) {
//         ctx.addIssue({
//             code: z.ZodIssueCode.custom,
//             message: "Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng",
//         });
//         return;
//     }

//     // 3. Ki·ªÉm tra email t·ªìn t·∫°i
//     const exists = await isEmailExist(val);
//     if (exists) {
//         ctx.addIssue({
//             code: z.ZodIssueCode.custom,
//             message: "Email ƒë√£ t·ªìn t·∫°i",
//         });
//     }
// });


export const RegisterSchema = z.object({
    fullName: z.string().trim().min(1, { message: "T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" }),
    email: emailSchema,
    password: passwordSchema,
    confirmPassword: z.string(),
})
    .refine((data) => data.password === data.confirmPassword, {
        message: "Password confirm kh√¥ng ch√≠nh x√°c",
        path: ['confirmPassword'],
    });;

export type TRegisterSchema = z.infer<typeof RegisterSchema>;